services:
  postgres:
    image: timescale/timescaledb:latest-pg15
    environment:
      POSTGRES_DB: weather_db
      POSTGRES_USER: weather_user
      POSTGRES_PASSWORD: weather_password
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./migrations:/docker-entrypoint-initdb.d
      - ./scripts/init_db.sh:/docker-entrypoint-initdb.d/init_db.sh
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U weather_user -d weather_db"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 5s
      retries: 5

  zookeeper:
    image: confluentinc/cp-zookeeper:7.5.1
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2181:2181"
    healthcheck:
      test: ["CMD-SHELL", "echo ruok | nc localhost 2181 || exit 1"]
      interval: 5s
      timeout: 5s
      retries: 5

  kafka:
    image: confluentinc/cp-kafka:7.5.1
    depends_on:
      zookeeper:
        condition: service_healthy
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
    healthcheck:
      test: ["CMD-SHELL", "kafka-topics --bootstrap-server kafka:9092 --list"]
      interval: 5s
      timeout: 5s
      retries: 5

  collector:
    build:
      context: .
      dockerfile: Dockerfile
    command: python -m collector.main
    ports:
      - "8001:8001"
    environment:
      - KAFKA_BOOTSTRAP_SERVERS=kafka:9092
      - POSTGRES_HOST=postgres
      - POSTGRES_PORT=5432
      - POSTGRES_DB=weather_db
      - POSTGRES_USER=weather_user
      - POSTGRES_PASSWORD=weather_password
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - COLLECTOR_PORT=8001
    depends_on:
      kafka:
        condition: service_healthy
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy

  consumer:
    build:
      context: .
      dockerfile: Dockerfile
    command: python -m consumer.main
    ports:
      - "8002:8002"
    environment:
      - KAFKA_BOOTSTRAP_SERVERS=kafka:9092
      - POSTGRES_HOST=postgres
      - POSTGRES_PORT=5432
      - POSTGRES_DB=weather_db
      - POSTGRES_USER=weather_user
      - POSTGRES_PASSWORD=weather_password
    restart: on-failure
    depends_on:
      kafka:
        condition: service_healthy
      postgres:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8002/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s

  query:
    build:
      context: .
      dockerfile: Dockerfile
    command: python -m query.main
    ports:
      - "8003:8003"
    environment:
      - POSTGRES_HOST=postgres
      - POSTGRES_PORT=5432
      - POSTGRES_DB=weather_db
      - POSTGRES_USER=weather_user
      - POSTGRES_PASSWORD=weather_password
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - QUERY_PORT=8003
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy

  generator:
    build:
      context: .
      dockerfile: Dockerfile
    command: python -m generator.main
    ports:
      - "8004:8004"
    environment:
      - COLLECTOR_URL=http://collector:8001/weather-data
      - GENERATOR_INTERVAL=5
      - GENERATOR_STATIONS=3
    depends_on:
      - collector

  test:
    build: 
      context: .
      dockerfile: Dockerfile
    command: python -m pytest "services/collector/tests/test_collector.py" "services/consumer/tests/test_consumer.py" "services/query/tests/test_query.py" -v
    volumes:
      - .:/app
    environment:
      - PYTHONPATH=/app
      - COLLECTOR_URL=http://collector:8001
      - CONSUMER_URL=http://consumer:8002
      - QUERY_URL=http://query:8003
      - POSTGRES_HOST=postgres
      - POSTGRES_PORT=5432
      - POSTGRES_DB=weather_db
      - POSTGRES_USER=weather_user
      - POSTGRES_PASSWORD=weather_password
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - KAFKA_BOOTSTRAP_SERVERS=kafka:9092
    depends_on:
      - collector
      - consumer
      - query
      - postgres
      - redis
      - kafka

volumes:
  postgres_data:
  redis_data: 