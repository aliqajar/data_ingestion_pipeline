name: Weather System Pipeline CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      
      # Cache Docker layers to speed up builds
      - name: Cache Docker layers
        uses: actions/cache@v3
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-
      
      # Create necessary directories
      - name: Create directories
        run: |
          mkdir -p test-results
      
      # Display Docker version info
      - name: Display Docker version
        run: |
          docker --version
          docker compose version
      
      - name: Build and run tests
        run: |
          # Build the images
          docker compose build
          
          # Make sure no containers are running
          docker compose down --remove-orphans
          
          # Run the tests using the CI-specific config
          docker compose -f docker-compose.yml -f docker-compose.ci.yml run --rm test
      
      # Capture logs in case of test failures
      - name: Capture Docker logs on failure
        if: failure()
        run: |
          docker compose logs > test-results/docker-logs.txt
      
      - name: Archive test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results
          path: test-results/
          retention-days: 7

  lint:
    name: Lint Python Code
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install flake8 black isort
          
      - name: Run linters
        run: |
          # Run flake8 for critical errors only - ignore global issues for now
          flake8 services/ --count --select=E9,F63,F7,F82 --ignore=F824 --show-source --statistics || true
          
          # Check code formatting with black (informational only)
          black --check services/ || true
          
          # Check imports with isort (informational only)
          isort --check-only --profile black services/ || true
          
          # For now, don't fail the build if linting fails
          # We're just collecting information on code style

# This workflow will run on push and pull requests to main branch
# Status checks must be enabled in the GitHub repository settings for the protection to work 